# This script segment is generated automatically by AutoPilot

# Memory (RAM/ROM)  definition:
set ID 84
set hasByteEnable 0
set MemName nn_inference_mat_mul_2_layer9_weights
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 256
set AddrWd 8
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "10111111110000010111110101111001" "00111111101000001100101100111000" "10111111101010011011000101011001" "10111111100000110110101100010011" "00111110101111101100001101010100" "10111110010110011000100001100001" "00111110111111111001011110011010" "00111111000111100100010001000000" "10111110100000011101110011110111" "00111110100110010001101000111100" "10111111110010110001011110101101" "00111110011111011010110101000001" "00111110111101000101001000010101" "10111101100011101100101011110000" "00111111001001000100010100101101" "10111110000001111000110001100001" "00111101111111011010100001100011" "00111111000110011100100101001111" "10111110110001010100100101000010" "00111110101110110000010101100110" "00111110100000100001000010001101" "10111110000110101110101011001010" "10111110100111011000101011100111" "10111101000000010101000101101001" "10111101010110101111100110011100" "10111110100011110000100001000111" "00111110100110101110010101000101" "10111110101010001000110010001011" "00111110010111111100010100010001" "10111101001110111100011111000110" "10111111001110011011011001001100" "00111101110100001111100101110000" "10111110101001001110110001011110" "10111111110011101010001100000000" "00111111100110001001010101010110" "10111110101001100001001010011111" "00111110101100000000100001101011" "00111111100011000101000111110111" "00111111000111111110101010010100" "10111110011101010100101101101110" "00111111000100011010001000011110" "00111110110100110011101011101100" "10111110110110111000110011001010" "00111110011000101101110101100111" "00111110101000110101100110110110" "00111110001101011101010001110111" "10111110010000001111101111010011" "00111110100001110100011110110010" "00111111000000001111000010101100" "10111111001000100100000110011110" "00111111001010111100101101111011" "10111110100001111100101011000000" "10111101101011011000100110101101" "10111110010001111011011011010011" "00111111001100010010100000100010" "00111110111100110010001010000101" "00111111000000000100111010100001" "00111110101011001000100000010111" "10111110100001100001110001100101" "00111110101010001011110000000111" "00111110111010010101111111101101" "00111110010001000001100100110110" "00111101011100011010010111111100" "00111110000000110111110001010011" "10111110101000011001011100101100" "10111111100101001100101111000001" "00111111100011110101000001110101" "10111111010111110011001101001010" "10111110010100100100000001010001" "00111111100110100100000000101010" "00111111000111001111011010110011" "10111110000100001111000101110100" "00111111001001001100000100001100" "00111110100110101010111110101101" "00111110001001000000100010110111" "00111110100010100111010111101011" "00111110101101111100000100000010" "00111110001110100110101101011100" "00111101110000010101111010111101" "10111110000001101000101101100110" "00111110110011010110000010100011" "10111110110010111000100101101001" "00111110010010111010100101010001" "00111110100100111100011111001101" "00111110101101111011001111110111" "10111110011111001010000011000111" "10111101101101010111100100100101" "00111110000001100000011100011110" "00111110010000101010110000011010" "00111110110011011000100000111000" "10111110011011001000101010110111" "00111110100000000111101000101110" "00111101100111111011001111011001" "00111110010111000000111111001110" "00111110010011111010111010011011" "00111110101000011111101011010001" "00111111011111101111111110101110" "10111111100110000100000011000111" "00111101001010010111011110011001" "00111110100100000101111101111110" "00111110100110011000111010000010" "10111110110101001111100111101001" "00111110000001110011010000000001" "00111101101000001001100110110011" "10111101110100111111010101101110" "00111101010101111000101111011100" "10111110101010000111001010101001" "00111110001011110010111101010110" "10111100000010100100110111101011" "10111111001101011011110100101100" "10111110000110000101111110100001" "10111110110011011111010010101001" "10111101111001011011110000010111" "10111111110010000100001111111010" "10111111100011110010001101011011" "10111111100010000000011111111000" "10111110101111010101100110000111" "00111101000001100011010001110111" "00111110110110001011011111100010" "00111110100010100011000110111011" "10111011000010011001011101000101" "00111111011001000001010010101000" "00111110100111010010001011000100" "10111110110010110010110001010111" "00111110111101010111001100100001" "00111111000111011011011110001011" "00111111011111111010100001010010" "10111110100100000100101111010110" "00111110100010101010111110100001" "10111110101001100001101011011000" "00111110011000010001101101000111" "10111110001111010010111110000011" "10111110011110100000101101110011" "10111110100110111000111110111111" "10111100110100101001001111101010" "10111110100010001111011000110100" "00111110000000101101100011100110" "10111110000000000000100010110001" "10111011111101110101100111000000" "10111110101011001100110100111110" "00111110100001111110110001101011" "10111110100000101001101100011110" "10111110100010011010111001010001" "10111110110000010001110001010111" "10111110011000001000111100001110" "10111101111111100110100111111100" "10111101000110101110001111101000" "00111100101101110010110100000100" "00111110010000010011100110110100" "10111110001011101000000000111100" "10111110101110111111110100110001" "10111110000101110000001101111000" "10111101011011101100100101101100" "10111110010100011101101110110010" "10111110011000010010101100010000" "10111101001001000010010110101011" "10111101110000110000100100000000" "10111101100011010010100010111011" "00111101100011111011111010100000" "10111100010000001110100000000000" "10111111110100101110111101010110" "00111111011010100111000011001101" "10111111001000001010101011111001" "11000000000011010011101011111011" "00111110101010100011001111110111" "10111111000001000011111011101110" "00111011100000100100100000010110" "00111111101011010110110010001001" "00111100010011000111010010110100" "00111111000011100100000011101101" "10111111001111101111111000010110" "00111110111001110111000011010110" "00111110001100011010000000101001" "00111111001000001100100010100100" "00111111001100000001000000010000" "00111111010100010011110011010011" "00111110011101001100011101110000" "00111111010010100010001011111110" "00111110110011000100010100010001" "00111111001101000101111000110001" "00111110010011111100110011111001" "00111110001011010011011000111001" "10111110001000000110010100110000" "00111100101110110001100001101100" "00111111000011010000010110111000" "10111111110110000101000101100010" "10111101011101101000101010010010" "00111100101001110011010010111001" "00111110100110011011001101100100" "00111101100101110001110001001000" "10111111101001100010110101100010" "00111111001111000011110010111101" "10111110010000110000101100101101" "00111110100011101111110000000111" "10111110110010100101011000100010" "00111101000000000110110111001010" "00111110100001100101101100100101" "10111101101101101010000010101010" "10111110101110100100101011100101" "10111110010101101010100010000110" "10111110101101011000101101101001" "10111101111111111101000001010100" "10111110101111010101101111101000" "10111101010111011111001000101111" "10111110001101011001101000100100" "10111101100101100011011101110101" "00111110010100010001001010011110" "00111110010000111110000001110001" "10111110000001110000111111000110" "00111110011100010110010100001001" "10111110101101101011010011001010" "10111110001110100110100001010011" "00111101101110101110111010001011" "10111110011010110011111100101101" "00111101001100000001000001100011" "00111100100000110000010100011011" "10111101000110001100101100100000" "10111110110101011101000100111100" "00111011101000110111110000100010" "00111110100000110000010010100101" "00111110001100110010010000110101" "10111101101101100011100001001010" "10111110101111010000000101010011" "10111110000000110010011000001011" "10111111110111100001101110000110" "10111111001010111101111111000011" "00111111011001111010111000000100" "10111111111111010010011101011101" "00111111000010001101011001101100" "00111111001000011101001011011011" "00111101101110110111001010010111" "00111110011100110010110000100011" "10111101111100010110101100110110" "00111110100100110101011111111011" "10111111011110110001110001000100" "00111110101110111001011010011110" "00111100011110101111010101001110" "00111110011010101001101100111001" "00111111001011001110100110101001" "00111111000010011100101000110101" "10111110011000110100000100000010" "00111110100100101011100100111110" "00111111000110000001010101000101" "00111111000101110100010111001111" "10111110000110000110111000000100" "00111011011011111010011000101100" "00111110110110101010100100011100" "00111110100000111010010110011111" "10111100101000010111110011110101" "10111111000110100100011100100110" "00111101110011111000000111111110" "00111110111101101001110010100000" "00111110111000101011100001100111" "00111110111111100101010010110111" "10111111010100110111011010011000" "00111111001001100110010010011110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 85 \
    name input_r \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename input_r \
    op interface \
    ports { input_r_address0 { O 11 vector } input_r_ce0 { O 1 bit } input_r_q0 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'input_r'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 86 \
    name output_r \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename output_r \
    op interface \
    ports { output_r_address0 { O 11 vector } output_r_ce0 { O 1 bit } output_r_we0 { O 1 bit } output_r_d0 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'output_r'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


