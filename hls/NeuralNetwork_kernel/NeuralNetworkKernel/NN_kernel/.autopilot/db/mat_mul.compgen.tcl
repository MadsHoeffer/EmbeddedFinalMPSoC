# This script segment is generated automatically by AutoPilot

set id 63
set name nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
set corename simcore_facc
set op facc
set stage_num 3
set max_latency -1
set registered_input 1
set impl_style no_dsp
set clk_width 1
set clk_signed 0
set reset_width 1
set reset_signed 0
set ce_width 1
set ce_signed 0
set in_data_width 32
set in_data_signed 0
set in_last_width 1
set in_last_signed 0
set in_valid_width 1
set in_valid_signed 0
set out_data_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_facc] == "ap_gen_simcore_facc"} {
eval "ap_gen_simcore_facc { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    in_data_width ${in_data_width} \
    in_data_signed ${in_data_signed} \
    in_last_width ${in_last_width} \
    in_last_signed ${in_last_signed} \
    in_valid_width ${in_valid_width} \
    in_valid_signed ${in_valid_signed} \
    out_data_width ${out_data_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_facc, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op facc
set corename FAcc_nodsp
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::facc_gen] == "::AESL_LIB_XILINX_FPV6::facc_gen"} {
eval "::AESL_LIB_XILINX_FPV6::facc_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    clk_width ${clk_width} \
    clk_signed ${clk_signed} \
    reset_width ${reset_width} \
    reset_signed ${reset_signed} \
    ce_width ${ce_width} \
    ce_signed ${ce_signed} \
    in_data_width ${in_data_width} \
    in_data_signed ${in_data_signed} \
    in_last_width ${in_last_width} \
    in_last_signed ${in_last_signed} \
    in_valid_width ${in_valid_width} \
    in_valid_signed ${in_valid_signed} \
    out_data_width ${out_data_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::facc_gen, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 68
set hasByteEnable 0
set MemName nn_inference_mat_mul_layer7_weights
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 320
set AddrWd 9
set impl_style auto
set TrueReset 0
set IsROM 1
set ROMData { "00111110100011100001011001011011" "00111111000000000000010101100100" "10111111010011000110000001101100" "10111110011000010100100010011111" "00111101100011110100000100000011" "10111101001110001111100111100000" "10111111010111001100101110010011" "10111110101100010001110100001000" "10111110110101111001100011111110" "10111110110010000111110000110011" "00111101101111000101101101111010" "10111110001101100010101100110110" "10111111100010010101000100110011" "10111101101010100101101111111001" "00111110001111011001101101000000" "00111100110000111100101001100000" "00111111000011100000111001110010" "10111110100010001011101011010010" "10111111001001101000010101110101" "10111110011000010000010011001111" "00111110100011111111010111101001" "00111110101001011111000000111111" "00111101101100001010110001101000" "10111110000100011010111100011000" "10111110011110111111001101110010" "00111101111110101100001010100111" "00111101110010010001011010100010" "10111111000000100111011000101010" "00111110111100001010000000010101" "00111111000000010000001111001001" "10111110001110001000100110111000" "00111101001011101110100011110001" "00111111000010110011100101010100" "00111110101110000001111100101111" "10111100011101001100010101011110" "10111110011100010000000000000110" "10111101111010101111111100011100" "00111100111011001011110011010011" "00111011001101101100111010001101" "00111100010010000100010010110110" "00111100110111011100010010000111" "10111110010000001010001001011010" "00111100111010011000101110100010" "00111101100100110010110000011101" "10111101011010011011010100101000" "10111101000011100110011101011111" "00111101111111101111100011111001" "10111111000001111010111110101011" "00111101100000001110101000001101" "00111101010001011101000101111111" "00111110110011100110100110000100" "10111111010111110111011110010011" "00111101101101011000001011110000" "10111100100001100001100100110011" "00111101100010001101011101110001" "00111111000100010100000110110011" "00111110011110110101100100011011" "10111110110001101011000111001101" "10111110000000110110111100001000" "00111111001100110000110100001001" "00111110011000100010010101010010" "10111110110001100011101100011110" "10111110000110101110011111111101" "00111110000011000010001001001001" "00111110000100101100011000110000" "00111111010101011110000011011101" "10111111010011100010011001110011" "00111101000001001101111001110111" "00111101110111111001000001001000" "00111101011111001110111000001101" "10111101111101011111110111100110" "10111111000111111110101011111110" "10111111000000000010010010000100" "00111101111001000000100110000101" "10111100001101110011111111100111" "00111111000111010011010110010110" "10111110110101101110001110010011" "00111110011000110100010011010011" "00111110010000100010111110101110" "10111110000010011100110100101010" "00111110101101110101010111011111" "10111110110010010010000001000010" "10111110001001011111111111110110" "10111101101010000111001101101101" "10111101010100011000101010010101" "10111110101100001111011101100101" "10111110101111011100100011111110" "00111111001001010110100100100011" "00111110001001110111110100011111" "00111110000110011101000100001001" "10111110010001100001011001011000" "10111101001000001011100110000110" "10111110011011111111000111110110" "00111100111100110110000011110010" "00111101110011010100000110001001" "00111101101001100100000010010100" "00111111001001100100111100011000" "10111101000010010101101011001101" "10111101011100111010000010100011" "00111101110000111100010000010110" "10111110010101110101010001010000" "00111110011011101111100000110010" "00111110100011110001011010101101" "10111110000111001010111110011100" "00111110000011101110100110110101" "10111110110111111110000001111010" "00111110111111000101111110101111" "10111110000000010000110001010001" "10111101000011011110011101000001" "00111100011100100001010100011001" "10111110100000010010001001110111" "10111111001000001001000101110100" "00111110001101101010001111100100" "00111100001001110101110010010001" "10111101010011110000000101100101" "00111110100001001000101100011101" "00111110000011000001010111110110" "00111110001011110000110110101010" "10111101110110001011111101010010" "00111101001110000001001011011001" "00111101001111110010101001100010" "10111101110001011111011011101110" "10111110000000010011111101110101" "10111101100000100111111011111100" "00111101111110010000000100110110" "10111110000000001101001100010100" "10111110111000000010101011110100" "00111110111000100111110000111111" "00111110101100000101100110101111" "00111101100000111011011101011101" "00111110110011110010010110101111" "10111110010110000010001100000100" "10111110110001110110100101011011" "10111110100010110101101011111010" "00111101000101000110011010101111" "00111111000001110111011110101010" "10111110010001111110010110001110" "10111111000011001110010101100001" "00111011000010010111001100101110" "00111110011111010011111011100011" "10111110110101011100101110111101" "10111111000000100010000111100010" "10111111010111111111000101001001" "10111111001101010101100000100100" "10111101011010011001100100000001" "10111110011101001101101110001000" "00111110001010110000111011110000" "00111110111011011110001101000011" "10111100111110010110010000111000" "10111101101110100111111010100010" "00111110010110011111000110010001" "00111110110101011110110111100011" "10111111001000011011000101000001" "10111111100110010001000001011110" "00111110000111100111001000110000" "00111110101011100100010111100011" "10111110101111010000011100011110" "10111110010101111111100001111101" "00111101010110100000001110010000" "00111101100010000000000000011010" "00111111000000101100110011100111" "00111110011110000010110010100000" "10111110010110010100010111011001" "10111110100010011110011111111000" "10111011111110000100001110110010" "10111100111000011001010011101110" "00111110001001101010010101000011" "10111111001011110101100001001101" "00111101101100110110001001111100" "00111101010111111111010110101001" "10111100111110100110111000110011" "00111110001100110000111101110011" "00111101010001010111010111011100" "00111100011111101111000110110111" "10111100100111001111011001111111" "00111110110101001111110010011110" "10111110111011101000111110111101" "10111111111110111001010001000011" "00111101010101111000000010010001" "10111101010101000011011000101110" "00111101101111111010000011100000" "10111101110101111101011101011000" "10111110111111010110000010000010" "10111111000110110100111011110000" "00111101100001101000001011111000" "00111110000001010111111111110011" "10111101100100111111001011110111" "10111110110101011110101100000110" "00111111010001001100100110011110" "10111101011110001000011111110010" "10111100110110110011010110110010" "10111101100001011111101111000111" "10111110001100101010101100110111" "00111110010000101110110000110001" "00111111001001010011000000101111" "10111110001110101000111111001101" "00111101100000000010111000011001" "00111110011110000100011011110001" "10111101101110110100010100010111" "10111110100110011110011010110000" "00111110110110110101000011101000" "10111110010000001010101011111011" "10111111100000001100100011110100" "10111110000000111011001110111000" "10111101101001111000011000011110" "00111110010101010110000010110000" "10111110111001011000111010011110" "00111110011011010101111110010010" "00111110010011001000011000001000" "00111110000001001100001110000101" "00111100001010111101001010000101" "00111101100100100111001100110101" "00111110010111101101010011011000" "10111111100110101111100111110110" "10111110100100110001110101011110" "00111101101110011110101111000111" "10111101010010001011000101101110" "10111110111110110000100111111001" "10111110000011001010110011001010" "00111110010001101101001010000011" "00111101011110011010110110001011" "00111110100101110111110001110100" "10111110001111100111110010100110" "10111100100111110101111001000001" "00111111001100010101000011001100" "00111110111111100111010100000111" "00111110011110011001000010010111" "00111110111000001001100000110011" "10111110111010000011001001110100" "10111110001101001011010110111011" "00111101101111101101100100111101" "00111110100010111100110011100011" "10111110101010110001011011011111" "10111111100100010000101111110001" "10111110110000101001010100001000" "00111101100111001111111000010101" "00111110110011100111110010110001" "10111101100100100011011110010101" "10111110110001010001010001100111" "10111100111010110001000100000010" "00111101110000011100101000111011" "00111110110001010111101011000110" "00111101110110111010100101011011" "10111110101110111011100100010000" "10111010101101111100110000000110" "00111110110101111110011001101101" "00111110011100000111010100001101" "10111110110111011101110000110111" "10111101110101000000010101110110" "10111011110011001011010010100101" "10111110100011111100100100110001" "00111110010110000011010101110101" "10111110011111111011000001011011" "00111101100001010000011001101010" "00111110001111110111011100101010" "00111110111100100010100110100110" "00111110001000111100101110001100" "10111111100100110001111010011000" "10111111000001111100110101110011" "10111011100000011101101000010010" "00111110000101010110010001011111" "10111110000010011000001110111011" "10111111110010000011110011000100" "10111110011111101110100101100010" "10111101011011001010000010011000" "00111111000000000000001100000001" "00111110110000111011011100110010" "10111110110000001111111001010111" "10111110011100001001000000111111" "00111110100010000001010000000101" "00111111000110100101110110100111" "10111110110011100011111000011110" "10111101111111000111101100011011" "10111101011111100101111110000110" "10111101001101100000001000001101" "10111110011011111010100101001001" "10111110010010000100110100001101" "00111110010000100001001110001101" "00111101100001011101111101101010" "00111101101111010101111000010101" "00111101100101010101011100101010" "00111101001001110010011001100111" "10111111011011000110010101000100" "10111110110000000000111100100001" "00111110000100011100100101111101" "00111110110001010001101001101010" "10111101011000101110000110101101" "10111111000010110011001010010111" "00111101111110011111111111101111" "00111100101110101111001000111010" "00111110001000000000000100110101" "10111101110000110111001000011000" "00111110001011001100110000000011" "00111110001100000010001000111101" "10111110010111100011010111111011" "00111110111110100011011111100001" "00111111011000111111000010011011" "00111110110101110001011000100100" "00111110100110101011010001110111" "00111110010001000011001110100000" "00111110110000110010110111011110" "10111101110111001110011010100110" "10111110011100110101110100110001" "10111100010011000010111000010001" "00111101101010111101111111001100" "10111100101110000010111001001110" "00111100100000010010111101110000" "10111111011010011001011101111000" "00111101000101110101110110011011" "10111100010110010011000100011110" "10111110001101100011001100011100" "10111110011001100001111011011110" "00111111010000101111111100001000" "10111100010110011101110000100001" "00111110111000101011110000001011" "10111110100110111000101111110111" "10111110011011011010000011000010" "10111011011110110001100110011100" "00111110100100000010100010110110" "10111101111010000110110011010001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.352
set ClkPeriod 10
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 69 \
    name input_r \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename input_r \
    op interface \
    ports { input_r_address0 { O 4 vector } input_r_ce0 { O 1 bit } input_r_q0 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'input_r'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 70 \
    name output_r \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename output_r \
    op interface \
    ports { output_r_address0 { O 11 vector } output_r_ce0 { O 1 bit } output_r_we0 { O 1 bit } output_r_d0 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'output_r'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


