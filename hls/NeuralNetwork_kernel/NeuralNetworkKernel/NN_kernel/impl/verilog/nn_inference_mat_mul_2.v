// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_mat_mul_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_35017_p_din0,
        grp_fu_35017_p_din1,
        grp_fu_35017_p_dout0,
        grp_fu_35017_p_ce
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state11 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state20 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state29 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state38 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_35017_p_din0;
output  [31:0] grp_fu_35017_p_din1;
input  [31:0] grp_fu_35017_p_dout0;
output   grp_fu_35017_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_r_address0;
reg input_r_ce0;
reg[10:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] layer9_weights_address0;
reg    layer9_weights_ce0;
wire   [31:0] layer9_weights_q0;
reg   [5:0] j_0_reg_187;
reg   [31:0] sum_0_reg_198;
reg   [5:0] j_1_reg_211;
reg   [31:0] sum_19_reg_222;
reg   [5:0] j_2_reg_235;
reg   [31:0] sum_2_reg_246;
reg   [5:0] j_3_reg_259;
reg   [31:0] sum_3_reg_270;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln70_reg_581;
wire    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
wire    ap_block_state14_pp1_stage0_iter2;
wire    ap_block_state15_pp1_stage0_iter3;
wire    ap_block_state16_pp1_stage0_iter4;
wire    ap_block_state17_pp1_stage0_iter5;
wire    ap_block_state18_pp1_stage0_iter6;
wire    ap_block_state19_pp1_stage0_iter7;
wire    ap_block_pp1_stage0_11001;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_state23_pp2_stage0_iter2;
wire    ap_block_state24_pp2_stage0_iter3;
wire    ap_block_state25_pp2_stage0_iter4;
wire    ap_block_state26_pp2_stage0_iter5;
wire    ap_block_state27_pp2_stage0_iter6;
wire    ap_block_state28_pp2_stage0_iter7;
wire    ap_block_pp2_stage0_11001;
wire    ap_block_state30_pp3_stage0_iter0;
wire    ap_block_state31_pp3_stage0_iter1;
wire    ap_block_state32_pp3_stage0_iter2;
wire    ap_block_state33_pp3_stage0_iter3;
wire    ap_block_state34_pp3_stage0_iter4;
wire    ap_block_state35_pp3_stage0_iter5;
wire    ap_block_state36_pp3_stage0_iter6;
wire    ap_block_state37_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln70_1_reg_621;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln70_2_reg_661;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln70_3_reg_701;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] reg_299;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln70_reg_581_pp0_iter3_reg;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter3_reg;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter3_reg;
reg    ap_enable_reg_pp3_iter4;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter3_reg;
wire   [0:0] icmp_ln66_fu_303_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln66_fu_309_p1;
reg   [63:0] zext_ln66_reg_563;
wire   [2:0] trunc_ln66_fu_313_p1;
reg   [2:0] trunc_ln66_reg_568;
wire   [5:0] add_ln70_fu_317_p2;
reg   [5:0] add_ln70_reg_575;
reg    ap_enable_reg_pp0_iter0;
reg   [5:0] add_ln70_reg_575_pp0_iter1_reg;
reg   [5:0] add_ln70_reg_575_pp0_iter2_reg;
reg   [5:0] add_ln70_reg_575_pp0_iter3_reg;
reg   [5:0] add_ln70_reg_575_pp0_iter4_reg;
wire   [0:0] icmp_ln70_fu_323_p2;
reg   [0:0] icmp_ln70_reg_581_pp0_iter1_reg;
reg   [0:0] icmp_ln70_reg_581_pp0_iter2_reg;
reg   [0:0] icmp_ln70_reg_581_pp0_iter4_reg;
reg   [0:0] icmp_ln70_reg_581_pp0_iter5_reg;
reg   [0:0] icmp_ln70_reg_581_pp0_iter6_reg;
wire   [31:0] grp_fu_362_p3;
reg    ap_enable_reg_pp0_iter7;
wire   [63:0] or_ln66_cast4_fu_375_p1;
reg   [63:0] or_ln66_cast4_reg_605;
wire    ap_CS_fsm_state11;
wire   [7:0] tmp_1_fu_379_p3;
reg   [7:0] tmp_1_reg_610;
wire   [5:0] add_ln70_1_fu_387_p2;
reg   [5:0] add_ln70_1_reg_615;
reg    ap_enable_reg_pp1_iter0;
reg   [5:0] add_ln70_1_reg_615_pp1_iter1_reg;
reg   [5:0] add_ln70_1_reg_615_pp1_iter2_reg;
reg   [5:0] add_ln70_1_reg_615_pp1_iter3_reg;
reg   [5:0] add_ln70_1_reg_615_pp1_iter4_reg;
wire   [0:0] icmp_ln70_1_fu_393_p2;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter1_reg;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter2_reg;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter4_reg;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter5_reg;
reg   [0:0] icmp_ln70_1_reg_621_pp1_iter6_reg;
wire   [31:0] grp_fu_423_p3;
reg    ap_enable_reg_pp1_iter7;
wire   [2:0] or_ln66_1_fu_431_p2;
reg   [2:0] or_ln66_1_reg_645;
wire    ap_CS_fsm_state20;
wire   [63:0] or_ln66_3_cast6_fu_436_p1;
reg   [63:0] or_ln66_3_cast6_reg_650;
wire   [5:0] add_ln70_2_fu_440_p2;
reg   [5:0] add_ln70_2_reg_655;
reg    ap_enable_reg_pp2_iter0;
reg   [5:0] add_ln70_2_reg_655_pp2_iter1_reg;
reg   [5:0] add_ln70_2_reg_655_pp2_iter2_reg;
reg   [5:0] add_ln70_2_reg_655_pp2_iter3_reg;
reg   [5:0] add_ln70_2_reg_655_pp2_iter4_reg;
wire   [0:0] icmp_ln70_2_fu_446_p2;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter1_reg;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter2_reg;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter4_reg;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter5_reg;
reg   [0:0] icmp_ln70_2_reg_661_pp2_iter6_reg;
wire   [31:0] grp_fu_484_p3;
reg    ap_enable_reg_pp2_iter7;
wire   [63:0] or_ln66_4_cast8_fu_497_p1;
reg   [63:0] or_ln66_4_cast8_reg_685;
wire    ap_CS_fsm_state29;
wire   [7:0] tmp_2_fu_501_p3;
reg   [7:0] tmp_2_reg_690;
wire   [5:0] add_ln70_3_fu_509_p2;
reg   [5:0] add_ln70_3_reg_695;
reg    ap_enable_reg_pp3_iter0;
reg   [5:0] add_ln70_3_reg_695_pp3_iter1_reg;
reg   [5:0] add_ln70_3_reg_695_pp3_iter2_reg;
reg   [5:0] add_ln70_3_reg_695_pp3_iter3_reg;
reg   [5:0] add_ln70_3_reg_695_pp3_iter4_reg;
wire   [0:0] icmp_ln70_3_fu_515_p2;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter1_reg;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter2_reg;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter4_reg;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter5_reg;
reg   [0:0] icmp_ln70_3_reg_701_pp3_iter6_reg;
wire   [31:0] grp_fu_545_p3;
reg    ap_enable_reg_pp3_iter7;
wire   [3:0] add_ln66_fu_553_p2;
wire    ap_CS_fsm_state38;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state30;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg   [3:0] i_0_reg_175;
reg   [5:0] ap_phi_mux_j_0_phi_fu_191_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_j_1_phi_fu_215_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] ap_phi_mux_j_2_phi_fu_239_p4;
wire    ap_block_pp2_stage0;
reg   [5:0] ap_phi_mux_j_3_phi_fu_263_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln72_fu_352_p1;
wire   [63:0] j_0_cast3_fu_329_p1;
wire   [63:0] zext_ln72_1_fu_413_p1;
wire   [63:0] j_1_cast5_fu_399_p1;
wire   [63:0] zext_ln72_2_fu_474_p1;
wire   [63:0] j_2_cast7_fu_452_p1;
wire   [63:0] zext_ln72_3_fu_535_p1;
wire   [63:0] j_3_cast9_fu_521_p1;
wire   [31:0] grp_fu_283_p0;
wire   [31:0] grp_fu_283_p1;
wire   [1:0] tmp_fu_334_p4;
wire   [7:0] add_ln_fu_344_p3;
wire   [0:0] grp_fu_362_p2;
wire   [2:0] or_ln66_fu_370_p2;
wire   [7:0] j_1_cast_fu_404_p1;
wire   [7:0] add_ln72_fu_408_p2;
wire   [0:0] grp_fu_423_p2;
wire   [1:0] tmp_s_fu_457_p4;
wire   [7:0] add_ln72_5_fu_466_p3;
wire   [0:0] grp_fu_484_p2;
wire   [2:0] or_ln66_2_fu_492_p2;
wire   [7:0] j_3_cast_fu_526_p1;
wire   [7:0] add_ln72_1_fu_530_p2;
wire   [0:0] grp_fu_545_p2;
wire    grp_fu_283_ce;
reg    grp_fu_362_in_valid;
reg    grp_fu_423_in_valid;
reg    grp_fu_484_in_valid;
reg    grp_fu_545_in_valid;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [31:0] grp_fu_362_p0;
wire   [31:0] grp_fu_423_p0;
wire   [31:0] grp_fu_484_p0;
wire   [31:0] grp_fu_545_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
end

nn_inference_mat_mul_2_layer9_weights #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
layer9_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer9_weights_address0),
    .ce0(layer9_weights_ce0),
    .q0(layer9_weights_q0)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_299),
    .in_last(grp_fu_362_p2),
    .in_valid(grp_fu_362_in_valid),
    .out_data(grp_fu_362_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_299),
    .in_last(grp_fu_423_p2),
    .in_valid(grp_fu_423_in_valid),
    .out_data(grp_fu_423_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_299),
    .in_last(grp_fu_484_p2),
    .in_valid(grp_fu_484_in_valid),
    .out_data(grp_fu_484_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_299),
    .in_last(grp_fu_545_p2),
    .in_valid(grp_fu_545_in_valid),
    .out_data(grp_fu_545_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln66_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln66_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state12)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state21)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state30)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_175 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        i_0_reg_175 <= add_ln66_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_187 <= 6'd0;
    end else if (((icmp_ln70_reg_581 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_187 <= add_ln70_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_211 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln70_1_reg_621 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        j_1_reg_211 <= add_ln70_1_reg_615;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_2_reg_235 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_2_reg_661 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        j_2_reg_235 <= add_ln70_2_reg_655;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j_3_reg_259 <= 6'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln70_3_reg_701 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_3_reg_259 <= add_ln70_3_reg_695;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_198 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln70_reg_581_pp0_iter6_reg == 1'd0))) begin
        sum_0_reg_198 <= grp_fu_362_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_19_reg_222 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (icmp_ln70_1_reg_621_pp1_iter6_reg == 1'd0))) begin
        sum_19_reg_222 <= grp_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_2_reg_246 <= 32'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter7 == 1'b1) & (icmp_ln70_2_reg_661_pp2_iter6_reg == 1'd0))) begin
        sum_2_reg_246 <= grp_fu_484_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sum_3_reg_270 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1) & (icmp_ln70_3_reg_701_pp3_iter6_reg == 1'd0))) begin
        sum_3_reg_270 <= grp_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln70_1_reg_615 <= add_ln70_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln70_1_reg_615_pp1_iter1_reg <= add_ln70_1_reg_615;
        icmp_ln70_1_reg_621 <= icmp_ln70_1_fu_393_p2;
        icmp_ln70_1_reg_621_pp1_iter1_reg <= icmp_ln70_1_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln70_1_reg_615_pp1_iter2_reg <= add_ln70_1_reg_615_pp1_iter1_reg;
        add_ln70_1_reg_615_pp1_iter3_reg <= add_ln70_1_reg_615_pp1_iter2_reg;
        add_ln70_1_reg_615_pp1_iter4_reg <= add_ln70_1_reg_615_pp1_iter3_reg;
        icmp_ln70_1_reg_621_pp1_iter2_reg <= icmp_ln70_1_reg_621_pp1_iter1_reg;
        icmp_ln70_1_reg_621_pp1_iter3_reg <= icmp_ln70_1_reg_621_pp1_iter2_reg;
        icmp_ln70_1_reg_621_pp1_iter4_reg <= icmp_ln70_1_reg_621_pp1_iter3_reg;
        icmp_ln70_1_reg_621_pp1_iter5_reg <= icmp_ln70_1_reg_621_pp1_iter4_reg;
        icmp_ln70_1_reg_621_pp1_iter6_reg <= icmp_ln70_1_reg_621_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln70_2_reg_655 <= add_ln70_2_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln70_2_reg_655_pp2_iter1_reg <= add_ln70_2_reg_655;
        icmp_ln70_2_reg_661 <= icmp_ln70_2_fu_446_p2;
        icmp_ln70_2_reg_661_pp2_iter1_reg <= icmp_ln70_2_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln70_2_reg_655_pp2_iter2_reg <= add_ln70_2_reg_655_pp2_iter1_reg;
        add_ln70_2_reg_655_pp2_iter3_reg <= add_ln70_2_reg_655_pp2_iter2_reg;
        add_ln70_2_reg_655_pp2_iter4_reg <= add_ln70_2_reg_655_pp2_iter3_reg;
        icmp_ln70_2_reg_661_pp2_iter2_reg <= icmp_ln70_2_reg_661_pp2_iter1_reg;
        icmp_ln70_2_reg_661_pp2_iter3_reg <= icmp_ln70_2_reg_661_pp2_iter2_reg;
        icmp_ln70_2_reg_661_pp2_iter4_reg <= icmp_ln70_2_reg_661_pp2_iter3_reg;
        icmp_ln70_2_reg_661_pp2_iter5_reg <= icmp_ln70_2_reg_661_pp2_iter4_reg;
        icmp_ln70_2_reg_661_pp2_iter6_reg <= icmp_ln70_2_reg_661_pp2_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln70_3_reg_695 <= add_ln70_3_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln70_3_reg_695_pp3_iter1_reg <= add_ln70_3_reg_695;
        icmp_ln70_3_reg_701 <= icmp_ln70_3_fu_515_p2;
        icmp_ln70_3_reg_701_pp3_iter1_reg <= icmp_ln70_3_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        add_ln70_3_reg_695_pp3_iter2_reg <= add_ln70_3_reg_695_pp3_iter1_reg;
        add_ln70_3_reg_695_pp3_iter3_reg <= add_ln70_3_reg_695_pp3_iter2_reg;
        add_ln70_3_reg_695_pp3_iter4_reg <= add_ln70_3_reg_695_pp3_iter3_reg;
        icmp_ln70_3_reg_701_pp3_iter2_reg <= icmp_ln70_3_reg_701_pp3_iter1_reg;
        icmp_ln70_3_reg_701_pp3_iter3_reg <= icmp_ln70_3_reg_701_pp3_iter2_reg;
        icmp_ln70_3_reg_701_pp3_iter4_reg <= icmp_ln70_3_reg_701_pp3_iter3_reg;
        icmp_ln70_3_reg_701_pp3_iter5_reg <= icmp_ln70_3_reg_701_pp3_iter4_reg;
        icmp_ln70_3_reg_701_pp3_iter6_reg <= icmp_ln70_3_reg_701_pp3_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln70_reg_575 <= add_ln70_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln70_reg_575_pp0_iter1_reg <= add_ln70_reg_575;
        icmp_ln70_reg_581 <= icmp_ln70_fu_323_p2;
        icmp_ln70_reg_581_pp0_iter1_reg <= icmp_ln70_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln70_reg_575_pp0_iter2_reg <= add_ln70_reg_575_pp0_iter1_reg;
        add_ln70_reg_575_pp0_iter3_reg <= add_ln70_reg_575_pp0_iter2_reg;
        add_ln70_reg_575_pp0_iter4_reg <= add_ln70_reg_575_pp0_iter3_reg;
        icmp_ln70_reg_581_pp0_iter2_reg <= icmp_ln70_reg_581_pp0_iter1_reg;
        icmp_ln70_reg_581_pp0_iter3_reg <= icmp_ln70_reg_581_pp0_iter2_reg;
        icmp_ln70_reg_581_pp0_iter4_reg <= icmp_ln70_reg_581_pp0_iter3_reg;
        icmp_ln70_reg_581_pp0_iter5_reg <= icmp_ln70_reg_581_pp0_iter4_reg;
        icmp_ln70_reg_581_pp0_iter6_reg <= icmp_ln70_reg_581_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        or_ln66_1_reg_645[0] <= or_ln66_1_fu_431_p2[0];
or_ln66_1_reg_645[2] <= or_ln66_1_fu_431_p2[2];
        or_ln66_3_cast6_reg_650[0] <= or_ln66_3_cast6_fu_436_p1[0];
or_ln66_3_cast6_reg_650[2] <= or_ln66_3_cast6_fu_436_p1[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        or_ln66_4_cast8_reg_685[2] <= or_ln66_4_cast8_fu_497_p1[2];
        tmp_2_reg_690[7] <= tmp_2_fu_501_p3[7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        or_ln66_cast4_reg_605[2 : 1] <= or_ln66_cast4_fu_375_p1[2 : 1];
        tmp_1_reg_610[7 : 6] <= tmp_1_fu_379_p3[7 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_581_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln70_3_reg_701_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln70_2_reg_661_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln70_1_reg_621_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        reg_299 <= grp_fu_35017_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln66_reg_568 <= trunc_ln66_fu_313_p1;
        zext_ln66_reg_563[3 : 0] <= zext_ln66_fu_309_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_323_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_1_fu_393_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_2_fu_446_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_3_fu_515_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln66_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_581 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_191_p4 = add_ln70_reg_575;
    end else begin
        ap_phi_mux_j_0_phi_fu_191_p4 = j_0_reg_187;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln70_1_reg_621 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_j_1_phi_fu_215_p4 = add_ln70_1_reg_615;
    end else begin
        ap_phi_mux_j_1_phi_fu_215_p4 = j_1_reg_211;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln70_2_reg_661 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_j_2_phi_fu_239_p4 = add_ln70_2_reg_655;
    end else begin
        ap_phi_mux_j_2_phi_fu_239_p4 = j_2_reg_235;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln70_3_reg_701 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_j_3_phi_fu_263_p4 = add_ln70_3_reg_695;
    end else begin
        ap_phi_mux_j_3_phi_fu_263_p4 = j_3_reg_259;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln70_reg_581_pp0_iter4_reg == 1'd0))) begin
        grp_fu_362_in_valid = 1'b1;
    end else begin
        grp_fu_362_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln70_1_reg_621_pp1_iter4_reg == 1'd0))) begin
        grp_fu_423_in_valid = 1'b1;
    end else begin
        grp_fu_423_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln70_2_reg_661_pp2_iter4_reg == 1'd0))) begin
        grp_fu_484_in_valid = 1'b1;
    end else begin
        grp_fu_484_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln70_3_reg_701_pp3_iter4_reg == 1'd0))) begin
        grp_fu_545_in_valid = 1'b1;
    end else begin
        grp_fu_545_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        input_r_address0 = j_3_cast9_fu_521_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        input_r_address0 = j_2_cast7_fu_452_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_r_address0 = j_1_cast5_fu_399_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = j_0_cast3_fu_329_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer9_weights_address0 = zext_ln72_3_fu_535_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        layer9_weights_address0 = zext_ln72_2_fu_474_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        layer9_weights_address0 = zext_ln72_1_fu_413_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer9_weights_address0 = zext_ln72_fu_352_p1;
    end else begin
        layer9_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        layer9_weights_ce0 = 1'b1;
    end else begin
        layer9_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_address0 = or_ln66_4_cast8_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = or_ln66_3_cast6_reg_650;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_address0 = or_ln66_cast4_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = zext_ln66_reg_563;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_d0 = sum_3_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = sum_2_reg_246;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_d0 = sum_19_reg_222;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = sum_0_reg_198;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln70_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln70_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln70_1_fu_393_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln70_1_fu_393_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln70_2_fu_446_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln70_2_fu_446_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln70_3_fu_515_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln70_3_fu_515_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_553_p2 = (i_0_reg_175 + 4'd4);

assign add_ln70_1_fu_387_p2 = (ap_phi_mux_j_1_phi_fu_215_p4 + 6'd1);

assign add_ln70_2_fu_440_p2 = (ap_phi_mux_j_2_phi_fu_239_p4 + 6'd1);

assign add_ln70_3_fu_509_p2 = (ap_phi_mux_j_3_phi_fu_263_p4 + 6'd1);

assign add_ln70_fu_317_p2 = (ap_phi_mux_j_0_phi_fu_191_p4 + 6'd1);

assign add_ln72_1_fu_530_p2 = (j_3_cast_fu_526_p1 + tmp_2_reg_690);

assign add_ln72_5_fu_466_p3 = {{tmp_s_fu_457_p4}, {ap_phi_mux_j_2_phi_fu_239_p4}};

assign add_ln72_fu_408_p2 = (j_1_cast_fu_404_p1 + tmp_1_reg_610);

assign add_ln_fu_344_p3 = {{tmp_fu_334_p4}, {ap_phi_mux_j_0_phi_fu_191_p4}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign grp_fu_283_ce = 1'b1;

assign grp_fu_283_p0 = layer9_weights_q0;

assign grp_fu_283_p1 = input_r_q0;

assign grp_fu_283_p2 = grp_fu_35017_p_dout0;

assign grp_fu_35017_p_ce = 1'b1;

assign grp_fu_35017_p_din0 = layer9_weights_q0;

assign grp_fu_35017_p_din1 = input_r_q0;

assign grp_fu_362_p2 = ((add_ln70_reg_575_pp0_iter4_reg == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_423_p2 = ((add_ln70_1_reg_615_pp1_iter4_reg == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_484_p2 = ((add_ln70_2_reg_655_pp2_iter4_reg == 6'd32) ? 1'b1 : 1'b0);

assign grp_fu_545_p2 = ((add_ln70_3_reg_695_pp3_iter4_reg == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_303_p2 = ((i_0_reg_175 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_393_p2 = ((ap_phi_mux_j_1_phi_fu_215_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_446_p2 = ((ap_phi_mux_j_2_phi_fu_239_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_515_p2 = ((ap_phi_mux_j_3_phi_fu_263_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_323_p2 = ((ap_phi_mux_j_0_phi_fu_191_p4 == 6'd32) ? 1'b1 : 1'b0);

assign j_0_cast3_fu_329_p1 = ap_phi_mux_j_0_phi_fu_191_p4;

assign j_1_cast5_fu_399_p1 = ap_phi_mux_j_1_phi_fu_215_p4;

assign j_1_cast_fu_404_p1 = ap_phi_mux_j_1_phi_fu_215_p4;

assign j_2_cast7_fu_452_p1 = ap_phi_mux_j_2_phi_fu_239_p4;

assign j_3_cast9_fu_521_p1 = ap_phi_mux_j_3_phi_fu_263_p4;

assign j_3_cast_fu_526_p1 = ap_phi_mux_j_3_phi_fu_263_p4;

assign or_ln66_1_fu_431_p2 = (trunc_ln66_reg_568 | 3'd2);

assign or_ln66_2_fu_492_p2 = (trunc_ln66_reg_568 | 3'd3);

assign or_ln66_3_cast6_fu_436_p1 = or_ln66_1_fu_431_p2;

assign or_ln66_4_cast8_fu_497_p1 = or_ln66_2_fu_492_p2;

assign or_ln66_cast4_fu_375_p1 = or_ln66_fu_370_p2;

assign or_ln66_fu_370_p2 = (trunc_ln66_reg_568 | 3'd1);

assign tmp_1_fu_379_p3 = {{or_ln66_fu_370_p2}, {5'd0}};

assign tmp_2_fu_501_p3 = {{or_ln66_2_fu_492_p2}, {5'd0}};

assign tmp_fu_334_p4 = {{i_0_reg_175[2:1]}};

assign tmp_s_fu_457_p4 = {{or_ln66_1_reg_645[2:1]}};

assign trunc_ln66_fu_313_p1 = i_0_reg_175[2:0];

assign zext_ln66_fu_309_p1 = i_0_reg_175;

assign zext_ln72_1_fu_413_p1 = add_ln72_fu_408_p2;

assign zext_ln72_2_fu_474_p1 = add_ln72_5_fu_466_p3;

assign zext_ln72_3_fu_535_p1 = add_ln72_1_fu_530_p2;

assign zext_ln72_fu_352_p1 = add_ln_fu_344_p3;

always @ (posedge ap_clk) begin
    zext_ln66_reg_563[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    or_ln66_cast4_reg_605[0] <= 1'b1;
    or_ln66_cast4_reg_605[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_1_reg_610[5:0] <= 6'b100000;
    or_ln66_1_reg_645[1] <= 1'b1;
    or_ln66_3_cast6_reg_650[1] <= 1'b1;
    or_ln66_3_cast6_reg_650[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    or_ln66_4_cast8_reg_685[1:0] <= 2'b11;
    or_ln66_4_cast8_reg_685[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_2_reg_690[6:0] <= 7'b1100000;
end

endmodule //nn_inference_mat_mul_2
