-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_mat_mul_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_35017_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_35017_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_35017_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_35017_p_ce : OUT STD_LOGIC );
end;


architecture behav of nn_inference_mat_mul_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer9_weights_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal layer9_weights_ce0 : STD_LOGIC;
    signal layer9_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_187 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_0_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_211 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_19_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_235 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_2_reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_reg_259 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_3_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln68_1_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln68_2_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln68_3_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln68_reg_581_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal icmp_ln68_1_reg_621_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal icmp_ln68_2_reg_661_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal icmp_ln68_3_reg_701_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln64_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_fu_313_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln64_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln68_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_575 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln68_reg_575_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_575_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_575_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_reg_575_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_581_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_581_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_581_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_581_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_581_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal or_ln64_cast4_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln64_cast4_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_fu_379_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_610 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln68_1_fu_387_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_1_reg_615 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln68_1_reg_615_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_1_reg_615_pp1_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_1_reg_615_pp1_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_1_reg_615_pp1_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_621_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_621_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_621_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_621_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_1_reg_621_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal or_ln64_1_fu_431_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln64_1_reg_645 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal or_ln64_3_cast6_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln64_3_cast6_reg_650 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_2_fu_440_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_2_reg_655 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal add_ln68_2_reg_655_pp2_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_2_reg_655_pp2_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_2_reg_655_pp2_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_2_reg_655_pp2_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_661_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_661_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_661_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_661_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_661_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal or_ln64_4_cast8_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln64_4_cast8_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_2_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln68_3_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_3_reg_695 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal add_ln68_3_reg_695_pp3_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_3_reg_695_pp3_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_3_reg_695_pp3_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_3_reg_695_pp3_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_3_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_701_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_701_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_701_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_701_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_701_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal add_ln64_fu_553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal i_0_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_j_0_phi_fu_191_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j_1_phi_fu_215_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_2_phi_fu_239_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j_3_phi_fu_263_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln70_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_cast3_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast5_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_cast7_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_3_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_3_cast9_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_334_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_344_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln64_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_cast_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_457_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln70_5_fu_466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln64_2_fu_492_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_cast_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_1_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_362_in_valid : STD_LOGIC;
    signal grp_fu_423_in_valid : STD_LOGIC;
    signal grp_fu_484_in_valid : STD_LOGIC;
    signal grp_fu_545_in_valid : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal grp_fu_362_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 IS
    generic (
        DWIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        ce : IN STD_LOGIC;
        in_data : IN STD_LOGIC_VECTOR (31 downto 0);
        in_last : IN STD_LOGIC_VECTOR (0 downto 0);
        in_valid : IN STD_LOGIC;
        out_data : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_mat_mul_2_layer9_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    layer9_weights_U : component nn_inference_mat_mul_2_layer9_weights
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer9_weights_address0,
        ce0 => layer9_weights_ce0,
        q0 => layer9_weights_q0);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U80 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_299,
        in_last => grp_fu_362_p2,
        in_valid => grp_fu_362_in_valid,
        out_data => grp_fu_362_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U81 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_299,
        in_last => grp_fu_423_p2,
        in_valid => grp_fu_423_in_valid,
        out_data => grp_fu_423_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U82 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_299,
        in_last => grp_fu_484_p2,
        in_valid => grp_fu_484_in_valid,
        out_data => grp_fu_484_p3);

    facc_32ns_32ns_1ns_32_3_no_dsp_1_U83 : component nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1
    generic map (
        DWIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        ce => ap_const_logic_1,
        in_data => reg_299,
        in_last => grp_fu_545_p2,
        in_valid => grp_fu_545_in_valid,
        out_data => grp_fu_545_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln64_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((icmp_ln64_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_175 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_0_reg_175 <= add_ln64_fu_553_p2;
            end if; 
        end if;
    end process;

    j_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_187 <= ap_const_lv6_0;
            elsif (((icmp_ln68_reg_581 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_187 <= add_ln68_reg_575;
            end if; 
        end if;
    end process;

    j_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_1_reg_211 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_1_reg_621 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                j_1_reg_211 <= add_ln68_1_reg_615;
            end if; 
        end if;
    end process;

    j_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_2_reg_235 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_2_reg_661 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
                j_2_reg_235 <= add_ln68_2_reg_655;
            end if; 
        end if;
    end process;

    j_3_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j_3_reg_259 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln68_3_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
                j_3_reg_259 <= add_ln68_3_reg_695;
            end if; 
        end if;
    end process;

    sum_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_0_reg_198 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln68_reg_581_pp0_iter6_reg = ap_const_lv1_0))) then 
                sum_0_reg_198 <= grp_fu_362_p3;
            end if; 
        end if;
    end process;

    sum_19_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum_19_reg_222 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (icmp_ln68_1_reg_621_pp1_iter6_reg = ap_const_lv1_0))) then 
                sum_19_reg_222 <= grp_fu_423_p3;
            end if; 
        end if;
    end process;

    sum_2_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_2_reg_246 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (icmp_ln68_2_reg_661_pp2_iter6_reg = ap_const_lv1_0))) then 
                sum_2_reg_246 <= grp_fu_484_p3;
            end if; 
        end if;
    end process;

    sum_3_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                sum_3_reg_270 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (icmp_ln68_3_reg_701_pp3_iter6_reg = ap_const_lv1_0))) then 
                sum_3_reg_270 <= grp_fu_545_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln68_1_reg_615 <= add_ln68_1_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln68_1_reg_615_pp1_iter1_reg <= add_ln68_1_reg_615;
                icmp_ln68_1_reg_621 <= icmp_ln68_1_fu_393_p2;
                icmp_ln68_1_reg_621_pp1_iter1_reg <= icmp_ln68_1_reg_621;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln68_1_reg_615_pp1_iter2_reg <= add_ln68_1_reg_615_pp1_iter1_reg;
                add_ln68_1_reg_615_pp1_iter3_reg <= add_ln68_1_reg_615_pp1_iter2_reg;
                add_ln68_1_reg_615_pp1_iter4_reg <= add_ln68_1_reg_615_pp1_iter3_reg;
                icmp_ln68_1_reg_621_pp1_iter2_reg <= icmp_ln68_1_reg_621_pp1_iter1_reg;
                icmp_ln68_1_reg_621_pp1_iter3_reg <= icmp_ln68_1_reg_621_pp1_iter2_reg;
                icmp_ln68_1_reg_621_pp1_iter4_reg <= icmp_ln68_1_reg_621_pp1_iter3_reg;
                icmp_ln68_1_reg_621_pp1_iter5_reg <= icmp_ln68_1_reg_621_pp1_iter4_reg;
                icmp_ln68_1_reg_621_pp1_iter6_reg <= icmp_ln68_1_reg_621_pp1_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln68_2_reg_655 <= add_ln68_2_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln68_2_reg_655_pp2_iter1_reg <= add_ln68_2_reg_655;
                icmp_ln68_2_reg_661 <= icmp_ln68_2_fu_446_p2;
                icmp_ln68_2_reg_661_pp2_iter1_reg <= icmp_ln68_2_reg_661;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln68_2_reg_655_pp2_iter2_reg <= add_ln68_2_reg_655_pp2_iter1_reg;
                add_ln68_2_reg_655_pp2_iter3_reg <= add_ln68_2_reg_655_pp2_iter2_reg;
                add_ln68_2_reg_655_pp2_iter4_reg <= add_ln68_2_reg_655_pp2_iter3_reg;
                icmp_ln68_2_reg_661_pp2_iter2_reg <= icmp_ln68_2_reg_661_pp2_iter1_reg;
                icmp_ln68_2_reg_661_pp2_iter3_reg <= icmp_ln68_2_reg_661_pp2_iter2_reg;
                icmp_ln68_2_reg_661_pp2_iter4_reg <= icmp_ln68_2_reg_661_pp2_iter3_reg;
                icmp_ln68_2_reg_661_pp2_iter5_reg <= icmp_ln68_2_reg_661_pp2_iter4_reg;
                icmp_ln68_2_reg_661_pp2_iter6_reg <= icmp_ln68_2_reg_661_pp2_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln68_3_reg_695 <= add_ln68_3_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln68_3_reg_695_pp3_iter1_reg <= add_ln68_3_reg_695;
                icmp_ln68_3_reg_701 <= icmp_ln68_3_fu_515_p2;
                icmp_ln68_3_reg_701_pp3_iter1_reg <= icmp_ln68_3_reg_701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                add_ln68_3_reg_695_pp3_iter2_reg <= add_ln68_3_reg_695_pp3_iter1_reg;
                add_ln68_3_reg_695_pp3_iter3_reg <= add_ln68_3_reg_695_pp3_iter2_reg;
                add_ln68_3_reg_695_pp3_iter4_reg <= add_ln68_3_reg_695_pp3_iter3_reg;
                icmp_ln68_3_reg_701_pp3_iter2_reg <= icmp_ln68_3_reg_701_pp3_iter1_reg;
                icmp_ln68_3_reg_701_pp3_iter3_reg <= icmp_ln68_3_reg_701_pp3_iter2_reg;
                icmp_ln68_3_reg_701_pp3_iter4_reg <= icmp_ln68_3_reg_701_pp3_iter3_reg;
                icmp_ln68_3_reg_701_pp3_iter5_reg <= icmp_ln68_3_reg_701_pp3_iter4_reg;
                icmp_ln68_3_reg_701_pp3_iter6_reg <= icmp_ln68_3_reg_701_pp3_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln68_reg_575 <= add_ln68_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln68_reg_575_pp0_iter1_reg <= add_ln68_reg_575;
                icmp_ln68_reg_581 <= icmp_ln68_fu_323_p2;
                icmp_ln68_reg_581_pp0_iter1_reg <= icmp_ln68_reg_581;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln68_reg_575_pp0_iter2_reg <= add_ln68_reg_575_pp0_iter1_reg;
                add_ln68_reg_575_pp0_iter3_reg <= add_ln68_reg_575_pp0_iter2_reg;
                add_ln68_reg_575_pp0_iter4_reg <= add_ln68_reg_575_pp0_iter3_reg;
                icmp_ln68_reg_581_pp0_iter2_reg <= icmp_ln68_reg_581_pp0_iter1_reg;
                icmp_ln68_reg_581_pp0_iter3_reg <= icmp_ln68_reg_581_pp0_iter2_reg;
                icmp_ln68_reg_581_pp0_iter4_reg <= icmp_ln68_reg_581_pp0_iter3_reg;
                icmp_ln68_reg_581_pp0_iter5_reg <= icmp_ln68_reg_581_pp0_iter4_reg;
                icmp_ln68_reg_581_pp0_iter6_reg <= icmp_ln68_reg_581_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    or_ln64_1_reg_645(0) <= or_ln64_1_fu_431_p2(0);    or_ln64_1_reg_645(2) <= or_ln64_1_fu_431_p2(2);
                    or_ln64_3_cast6_reg_650(0) <= or_ln64_3_cast6_fu_436_p1(0);    or_ln64_3_cast6_reg_650(2) <= or_ln64_3_cast6_fu_436_p1(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    or_ln64_4_cast8_reg_685(2) <= or_ln64_4_cast8_fu_497_p1(2);
                    tmp_2_reg_690(7) <= tmp_2_fu_501_p3(7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    or_ln64_cast4_reg_605(2 downto 1) <= or_ln64_cast4_fu_375_p1(2 downto 1);
                    tmp_1_reg_610(7 downto 6) <= tmp_1_fu_379_p3(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_581_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln68_3_reg_701_pp3_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_2_reg_661_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln68_1_reg_621_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then
                reg_299 <= grp_fu_35017_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln64_reg_568 <= trunc_ln64_fu_313_p1;
                    zext_ln64_reg_563(3 downto 0) <= zext_ln64_fu_309_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln64_reg_563(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln64_cast4_reg_605(0) <= '1';
    or_ln64_cast4_reg_605(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_610(5 downto 0) <= "100000";
    or_ln64_1_reg_645(1) <= '1';
    or_ln64_3_cast6_reg_650(1) <= '1';
    or_ln64_3_cast6_reg_650(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    or_ln64_4_cast8_reg_685(1 downto 0) <= "11";
    or_ln64_4_cast8_reg_685(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_2_reg_690(6 downto 0) <= "1100000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, icmp_ln64_fu_303_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln68_fu_323_p2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp1_iter0, icmp_ln68_1_fu_393_p2, ap_enable_reg_pp1_iter7, ap_enable_reg_pp2_iter0, icmp_ln68_2_fu_446_p2, ap_enable_reg_pp2_iter7, ap_enable_reg_pp3_iter0, icmp_ln68_3_fu_515_p2, ap_enable_reg_pp3_iter7, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter6, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter6, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln64_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln68_fu_323_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln68_fu_323_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln68_1_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln68_1_fu_393_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln68_2_fu_446_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln68_2_fu_446_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln68_3_fu_515_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln68_3_fu_515_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln64_fu_553_p2 <= std_logic_vector(unsigned(i_0_reg_175) + unsigned(ap_const_lv4_4));
    add_ln68_1_fu_387_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_1_phi_fu_215_p4) + unsigned(ap_const_lv6_1));
    add_ln68_2_fu_440_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_2_phi_fu_239_p4) + unsigned(ap_const_lv6_1));
    add_ln68_3_fu_509_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_3_phi_fu_263_p4) + unsigned(ap_const_lv6_1));
    add_ln68_fu_317_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_191_p4) + unsigned(ap_const_lv6_1));
    add_ln70_1_fu_530_p2 <= std_logic_vector(unsigned(j_3_cast_fu_526_p1) + unsigned(tmp_2_reg_690));
    add_ln70_5_fu_466_p3 <= (tmp_s_fu_457_p4 & ap_phi_mux_j_2_phi_fu_239_p4);
    add_ln70_fu_408_p2 <= std_logic_vector(unsigned(j_1_cast_fu_404_p1) + unsigned(tmp_1_reg_610));
    add_ln_fu_344_p3 <= (tmp_fu_334_p4 & ap_phi_mux_j_0_phi_fu_191_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state29 <= ap_CS_fsm(7);
    ap_CS_fsm_state38 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln68_fu_323_p2)
    begin
        if ((icmp_ln68_fu_323_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln68_1_fu_393_p2)
    begin
        if ((icmp_ln68_1_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(icmp_ln68_2_fu_446_p2)
    begin
        if ((icmp_ln68_2_fu_446_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state30_assign_proc : process(icmp_ln68_3_fu_515_p2)
    begin
        if ((icmp_ln68_3_fu_515_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln64_fu_303_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln64_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6)
    begin
        if (((ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_191_p4_assign_proc : process(j_0_reg_187, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln68_reg_581, add_ln68_reg_575, ap_block_pp0_stage0)
    begin
        if (((icmp_ln68_reg_581 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_191_p4 <= add_ln68_reg_575;
        else 
            ap_phi_mux_j_0_phi_fu_191_p4 <= j_0_reg_187;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_215_p4_assign_proc : process(j_1_reg_211, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln68_1_reg_621, add_ln68_1_reg_615, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln68_1_reg_621 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_1_phi_fu_215_p4 <= add_ln68_1_reg_615;
        else 
            ap_phi_mux_j_1_phi_fu_215_p4 <= j_1_reg_211;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_239_p4_assign_proc : process(j_2_reg_235, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln68_2_reg_661, add_ln68_2_reg_655, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_2_reg_661 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_2_phi_fu_239_p4 <= add_ln68_2_reg_655;
        else 
            ap_phi_mux_j_2_phi_fu_239_p4 <= j_2_reg_235;
        end if; 
    end process;


    ap_phi_mux_j_3_phi_fu_263_p4_assign_proc : process(j_3_reg_259, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln68_3_reg_701, add_ln68_3_reg_695, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln68_3_reg_701 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_3_phi_fu_263_p4 <= add_ln68_3_reg_695;
        else 
            ap_phi_mux_j_3_phi_fu_263_p4 <= j_3_reg_259;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln64_fu_303_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln64_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_ce <= ap_const_logic_1;
    grp_fu_283_p0 <= layer9_weights_q0;
    grp_fu_283_p1 <= input_r_q0;
    grp_fu_283_p2 <= grp_fu_35017_p_dout0;
    grp_fu_35017_p_ce <= ap_const_logic_1;
    grp_fu_35017_p_din0 <= layer9_weights_q0;
    grp_fu_35017_p_din1 <= input_r_q0;

    grp_fu_362_in_valid_assign_proc : process(icmp_ln68_reg_581_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln68_reg_581_pp0_iter4_reg = ap_const_lv1_0))) then 
            grp_fu_362_in_valid <= ap_const_logic_1;
        else 
            grp_fu_362_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_362_p2 <= "1" when (add_ln68_reg_575_pp0_iter4_reg = ap_const_lv6_20) else "0";

    grp_fu_423_in_valid_assign_proc : process(icmp_ln68_1_reg_621_pp1_iter4_reg, ap_enable_reg_pp1_iter5, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln68_1_reg_621_pp1_iter4_reg = ap_const_lv1_0))) then 
            grp_fu_423_in_valid <= ap_const_logic_1;
        else 
            grp_fu_423_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_423_p2 <= "1" when (add_ln68_1_reg_615_pp1_iter4_reg = ap_const_lv6_20) else "0";

    grp_fu_484_in_valid_assign_proc : process(icmp_ln68_2_reg_661_pp2_iter4_reg, ap_enable_reg_pp2_iter5, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (icmp_ln68_2_reg_661_pp2_iter4_reg = ap_const_lv1_0))) then 
            grp_fu_484_in_valid <= ap_const_logic_1;
        else 
            grp_fu_484_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_484_p2 <= "1" when (add_ln68_2_reg_655_pp2_iter4_reg = ap_const_lv6_20) else "0";

    grp_fu_545_in_valid_assign_proc : process(icmp_ln68_3_reg_701_pp3_iter4_reg, ap_enable_reg_pp3_iter5, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1) and (icmp_ln68_3_reg_701_pp3_iter4_reg = ap_const_lv1_0))) then 
            grp_fu_545_in_valid <= ap_const_logic_1;
        else 
            grp_fu_545_in_valid <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_545_p2 <= "1" when (add_ln68_3_reg_695_pp3_iter4_reg = ap_const_lv6_20) else "0";
    icmp_ln64_fu_303_p2 <= "1" when (i_0_reg_175 = ap_const_lv4_8) else "0";
    icmp_ln68_1_fu_393_p2 <= "1" when (ap_phi_mux_j_1_phi_fu_215_p4 = ap_const_lv6_20) else "0";
    icmp_ln68_2_fu_446_p2 <= "1" when (ap_phi_mux_j_2_phi_fu_239_p4 = ap_const_lv6_20) else "0";
    icmp_ln68_3_fu_515_p2 <= "1" when (ap_phi_mux_j_3_phi_fu_263_p4 = ap_const_lv6_20) else "0";
    icmp_ln68_fu_323_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_191_p4 = ap_const_lv6_20) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, j_0_cast3_fu_329_p1, j_1_cast5_fu_399_p1, j_2_cast7_fu_452_p1, j_3_cast9_fu_521_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            input_r_address0 <= j_3_cast9_fu_521_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            input_r_address0 <= j_2_cast7_fu_452_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_r_address0 <= j_1_cast5_fu_399_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= j_0_cast3_fu_329_p1(11 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_0_cast3_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_191_p4),64));
    j_1_cast5_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_215_p4),64));
    j_1_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_215_p4),8));
    j_2_cast7_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_239_p4),64));
    j_3_cast9_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_3_phi_fu_263_p4),64));
    j_3_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_3_phi_fu_263_p4),8));

    layer9_weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp3_stage0, zext_ln70_fu_352_p1, zext_ln70_1_fu_413_p1, zext_ln70_2_fu_474_p1, zext_ln70_3_fu_535_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            layer9_weights_address0 <= zext_ln70_3_fu_535_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            layer9_weights_address0 <= zext_ln70_2_fu_474_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            layer9_weights_address0 <= zext_ln70_1_fu_413_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer9_weights_address0 <= zext_ln70_fu_352_p1(8 - 1 downto 0);
        else 
            layer9_weights_address0 <= "XXXXXXXX";
        end if; 
    end process;


    layer9_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            layer9_weights_ce0 <= ap_const_logic_1;
        else 
            layer9_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln64_1_fu_431_p2 <= (trunc_ln64_reg_568 or ap_const_lv3_2);
    or_ln64_2_fu_492_p2 <= (trunc_ln64_reg_568 or ap_const_lv3_3);
    or_ln64_3_cast6_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln64_1_fu_431_p2),64));
    or_ln64_4_cast8_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln64_2_fu_492_p2),64));
    or_ln64_cast4_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln64_fu_370_p2),64));
    or_ln64_fu_370_p2 <= (trunc_ln64_reg_568 or ap_const_lv3_1);

    output_r_address0_assign_proc : process(zext_ln64_reg_563, or_ln64_cast4_reg_605, ap_CS_fsm_state11, ap_CS_fsm_state20, or_ln64_3_cast6_reg_650, or_ln64_4_cast8_reg_685, ap_CS_fsm_state29, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_address0 <= or_ln64_4_cast8_reg_685(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_address0 <= or_ln64_3_cast6_reg_650(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_address0 <= or_ln64_cast4_reg_605(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= zext_ln64_reg_563(11 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(sum_0_reg_198, sum_19_reg_222, sum_2_reg_246, sum_3_reg_270, ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_d0 <= sum_3_reg_270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_d0 <= sum_2_reg_246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_d0 <= sum_19_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d0 <= sum_0_reg_198;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state20, ap_CS_fsm_state29, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_379_p3 <= (or_ln64_fu_370_p2 & ap_const_lv5_0);
    tmp_2_fu_501_p3 <= (or_ln64_2_fu_492_p2 & ap_const_lv5_0);
    tmp_fu_334_p4 <= i_0_reg_175(2 downto 1);
    tmp_s_fu_457_p4 <= or_ln64_1_reg_645(2 downto 1);
    trunc_ln64_fu_313_p1 <= i_0_reg_175(3 - 1 downto 0);
    zext_ln64_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_175),64));
    zext_ln70_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_408_p2),64));
    zext_ln70_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_5_fu_466_p3),64));
    zext_ln70_3_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_530_p2),64));
    zext_ln70_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_344_p3),64));
end behav;
