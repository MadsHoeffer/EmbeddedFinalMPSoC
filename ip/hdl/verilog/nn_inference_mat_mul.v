// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_mat_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        grp_fu_35017_p_din0,
        grp_fu_35017_p_din1,
        grp_fu_35017_p_dout0,
        grp_fu_35017_p_ce
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state11 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state20 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state29 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state38 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [31:0] grp_fu_35017_p_din0;
output  [31:0] grp_fu_35017_p_din1;
input  [31:0] grp_fu_35017_p_dout0;
output   grp_fu_35017_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_r_address0;
reg input_r_ce0;
reg[10:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] layer7_weights_address0;
reg    layer7_weights_ce0;
wire   [31:0] layer7_weights_q0;
reg   [3:0] j_0_reg_185;
reg   [31:0] sum_0_reg_196;
reg   [3:0] j_1_reg_209;
reg   [31:0] sum_19_reg_220;
reg   [3:0] j_2_reg_233;
reg   [31:0] sum_2_reg_244;
reg   [3:0] j_3_reg_257;
reg   [31:0] sum_3_reg_268;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln68_reg_686;
wire    ap_block_state12_pp1_stage0_iter0;
wire    ap_block_state13_pp1_stage0_iter1;
wire    ap_block_state14_pp1_stage0_iter2;
wire    ap_block_state15_pp1_stage0_iter3;
wire    ap_block_state16_pp1_stage0_iter4;
wire    ap_block_state17_pp1_stage0_iter5;
wire    ap_block_state18_pp1_stage0_iter6;
wire    ap_block_state19_pp1_stage0_iter7;
wire    ap_block_pp1_stage0_11001;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_state23_pp2_stage0_iter2;
wire    ap_block_state24_pp2_stage0_iter3;
wire    ap_block_state25_pp2_stage0_iter4;
wire    ap_block_state26_pp2_stage0_iter5;
wire    ap_block_state27_pp2_stage0_iter6;
wire    ap_block_state28_pp2_stage0_iter7;
wire    ap_block_pp2_stage0_11001;
wire    ap_block_state30_pp3_stage0_iter0;
wire    ap_block_state31_pp3_stage0_iter1;
wire    ap_block_state32_pp3_stage0_iter2;
wire    ap_block_state33_pp3_stage0_iter3;
wire    ap_block_state34_pp3_stage0_iter4;
wire    ap_block_state35_pp3_stage0_iter5;
wire    ap_block_state36_pp3_stage0_iter6;
wire    ap_block_state37_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln68_1_reg_731;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln68_2_reg_776;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln68_3_reg_821;
wire   [31:0] grp_fu_281_p2;
reg   [31:0] reg_297;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln68_reg_686_pp0_iter3_reg;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter3_reg;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter3_reg;
reg    ap_enable_reg_pp3_iter4;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter3_reg;
wire   [0:0] icmp_ln64_fu_301_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln64_fu_307_p1;
reg   [63:0] zext_ln64_reg_658;
wire   [4:0] trunc_ln64_fu_311_p1;
reg   [4:0] trunc_ln64_reg_663;
wire   [8:0] p_shl_cast_fu_323_p1;
reg   [8:0] p_shl_cast_reg_670;
wire   [6:0] zext_ln68_fu_333_p1;
reg   [6:0] zext_ln68_reg_675;
wire   [3:0] add_ln68_fu_337_p2;
reg   [3:0] add_ln68_reg_680;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] add_ln68_reg_680_pp0_iter1_reg;
reg   [3:0] add_ln68_reg_680_pp0_iter2_reg;
reg   [3:0] add_ln68_reg_680_pp0_iter3_reg;
reg   [3:0] add_ln68_reg_680_pp0_iter4_reg;
wire   [0:0] icmp_ln68_fu_343_p2;
reg   [0:0] icmp_ln68_reg_686_pp0_iter1_reg;
reg   [0:0] icmp_ln68_reg_686_pp0_iter2_reg;
reg   [0:0] icmp_ln68_reg_686_pp0_iter4_reg;
reg   [0:0] icmp_ln68_reg_686_pp0_iter5_reg;
reg   [0:0] icmp_ln68_reg_686_pp0_iter6_reg;
wire   [31:0] grp_fu_382_p3;
reg    ap_enable_reg_pp0_iter7;
wire   [63:0] or_ln64_cast10_fu_395_p1;
reg   [63:0] or_ln64_cast10_reg_710;
wire    ap_CS_fsm_state11;
wire   [8:0] p_shl2_cast_fu_407_p1;
reg   [8:0] p_shl2_cast_reg_715;
wire   [6:0] zext_ln68_1_fu_419_p1;
reg   [6:0] zext_ln68_1_reg_720;
wire   [3:0] add_ln68_1_fu_423_p2;
reg   [3:0] add_ln68_1_reg_725;
reg    ap_enable_reg_pp1_iter0;
reg   [3:0] add_ln68_1_reg_725_pp1_iter1_reg;
reg   [3:0] add_ln68_1_reg_725_pp1_iter2_reg;
reg   [3:0] add_ln68_1_reg_725_pp1_iter3_reg;
reg   [3:0] add_ln68_1_reg_725_pp1_iter4_reg;
wire   [0:0] icmp_ln68_1_fu_429_p2;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter1_reg;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter2_reg;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter4_reg;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter5_reg;
reg   [0:0] icmp_ln68_1_reg_731_pp1_iter6_reg;
wire   [31:0] grp_fu_468_p3;
reg    ap_enable_reg_pp1_iter7;
wire   [63:0] or_ln64_7_cast12_fu_481_p1;
reg   [63:0] or_ln64_7_cast12_reg_755;
wire    ap_CS_fsm_state20;
wire   [8:0] p_shl4_cast_fu_493_p1;
reg   [8:0] p_shl4_cast_reg_760;
wire   [6:0] zext_ln68_2_fu_505_p1;
reg   [6:0] zext_ln68_2_reg_765;
wire   [3:0] add_ln68_2_fu_509_p2;
reg   [3:0] add_ln68_2_reg_770;
reg    ap_enable_reg_pp2_iter0;
reg   [3:0] add_ln68_2_reg_770_pp2_iter1_reg;
reg   [3:0] add_ln68_2_reg_770_pp2_iter2_reg;
reg   [3:0] add_ln68_2_reg_770_pp2_iter3_reg;
reg   [3:0] add_ln68_2_reg_770_pp2_iter4_reg;
wire   [0:0] icmp_ln68_2_fu_515_p2;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter1_reg;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter2_reg;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter4_reg;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter5_reg;
reg   [0:0] icmp_ln68_2_reg_776_pp2_iter6_reg;
wire   [31:0] grp_fu_554_p3;
reg    ap_enable_reg_pp2_iter7;
wire   [63:0] or_ln64_8_cast14_fu_567_p1;
reg   [63:0] or_ln64_8_cast14_reg_800;
wire    ap_CS_fsm_state29;
wire   [8:0] p_shl6_cast_fu_579_p1;
reg   [8:0] p_shl6_cast_reg_805;
wire   [6:0] zext_ln68_3_fu_591_p1;
reg   [6:0] zext_ln68_3_reg_810;
wire   [3:0] add_ln68_3_fu_595_p2;
reg   [3:0] add_ln68_3_reg_815;
reg    ap_enable_reg_pp3_iter0;
reg   [3:0] add_ln68_3_reg_815_pp3_iter1_reg;
reg   [3:0] add_ln68_3_reg_815_pp3_iter2_reg;
reg   [3:0] add_ln68_3_reg_815_pp3_iter3_reg;
reg   [3:0] add_ln68_3_reg_815_pp3_iter4_reg;
wire   [0:0] icmp_ln68_3_fu_601_p2;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter1_reg;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter2_reg;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter4_reg;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter5_reg;
reg   [0:0] icmp_ln68_3_reg_821_pp3_iter6_reg;
wire   [31:0] grp_fu_640_p3;
reg    ap_enable_reg_pp3_iter7;
wire   [5:0] add_ln64_fu_648_p2;
wire    ap_CS_fsm_state38;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state30;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg   [5:0] i_0_reg_173;
reg   [3:0] ap_phi_mux_j_0_phi_fu_189_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_j_1_phi_fu_213_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_j_2_phi_fu_237_p4;
wire    ap_block_pp2_stage0;
reg   [3:0] ap_phi_mux_j_3_phi_fu_261_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln70_7_fu_372_p1;
wire   [63:0] j_0_cast9_fu_349_p1;
wire   [63:0] zext_ln70_9_fu_458_p1;
wire   [63:0] j_1_cast11_fu_435_p1;
wire   [63:0] zext_ln70_11_fu_544_p1;
wire   [63:0] j_2_cast13_fu_521_p1;
wire   [63:0] zext_ln70_13_fu_630_p1;
wire   [63:0] j_3_cast15_fu_607_p1;
wire   [31:0] grp_fu_281_p0;
wire   [31:0] grp_fu_281_p1;
wire   [7:0] p_shl_fu_315_p3;
wire   [5:0] empty_96_fu_327_p2;
wire   [6:0] j_0_cast_fu_354_p1;
wire   [6:0] add_ln70_3_fu_358_p2;
wire   [8:0] zext_ln70_fu_363_p1;
wire   [8:0] add_ln70_fu_367_p2;
wire   [0:0] grp_fu_382_p2;
wire   [4:0] or_ln64_fu_390_p2;
wire   [7:0] p_shl2_fu_399_p3;
wire   [5:0] p_shl3_fu_411_p3;
wire   [6:0] j_1_cast_fu_440_p1;
wire   [6:0] add_ln70_4_fu_444_p2;
wire   [8:0] zext_ln70_8_fu_449_p1;
wire   [8:0] add_ln70_5_fu_453_p2;
wire   [0:0] grp_fu_468_p2;
wire   [4:0] or_ln64_5_fu_476_p2;
wire   [7:0] p_shl4_fu_485_p3;
wire   [5:0] p_shl5_fu_497_p3;
wire   [6:0] j_2_cast_fu_526_p1;
wire   [6:0] add_ln70_6_fu_530_p2;
wire   [8:0] zext_ln70_10_fu_535_p1;
wire   [8:0] add_ln70_7_fu_539_p2;
wire   [0:0] grp_fu_554_p2;
wire   [4:0] or_ln64_6_fu_562_p2;
wire   [7:0] p_shl6_fu_571_p3;
wire   [5:0] p_shl7_fu_583_p3;
wire   [6:0] j_3_cast_fu_612_p1;
wire   [6:0] add_ln70_8_fu_616_p2;
wire   [8:0] zext_ln70_12_fu_621_p1;
wire   [8:0] add_ln70_9_fu_625_p2;
wire   [0:0] grp_fu_640_p2;
wire    grp_fu_281_ce;
reg    grp_fu_382_in_valid;
reg    grp_fu_468_in_valid;
reg    grp_fu_554_in_valid;
reg    grp_fu_640_in_valid;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [31:0] grp_fu_382_p0;
wire   [31:0] grp_fu_468_p0;
wire   [31:0] grp_fu_554_p0;
wire   [31:0] grp_fu_640_p0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
end

nn_inference_mat_mul_layer7_weights #(
    .DataWidth( 32 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
layer7_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer7_weights_address0),
    .ce0(layer7_weights_ce0),
    .q0(layer7_weights_q0)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_297),
    .in_last(grp_fu_382_p2),
    .in_valid(grp_fu_382_in_valid),
    .out_data(grp_fu_382_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_297),
    .in_last(grp_fu_468_p2),
    .in_valid(grp_fu_468_in_valid),
    .out_data(grp_fu_468_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_297),
    .in_last(grp_fu_554_p2),
    .in_valid(grp_fu_554_in_valid),
    .out_data(grp_fu_554_p3)
);

nn_inference_facc_32ns_32ns_1ns_32_3_no_dsp_1 #(
    .DWIDTH( 32 ))
facc_32ns_32ns_1ns_32_3_no_dsp_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .ce(1'b1),
    .in_data(reg_297),
    .in_last(grp_fu_640_p2),
    .in_valid(grp_fu_640_in_valid),
    .out_data(grp_fu_640_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln64_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln64_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state12)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state21)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp2_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state30)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_173 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        i_0_reg_173 <= add_ln64_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_185 <= 4'd0;
    end else if (((icmp_ln68_reg_686 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_185 <= add_ln68_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_209 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln68_1_reg_731 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        j_1_reg_209 <= add_ln68_1_reg_725;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_2_reg_233 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln68_2_reg_776 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        j_2_reg_233 <= add_ln68_2_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j_3_reg_257 <= 4'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln68_3_reg_821 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_3_reg_257 <= add_ln68_3_reg_815;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_196 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln68_reg_686_pp0_iter6_reg == 1'd0))) begin
        sum_0_reg_196 <= grp_fu_382_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_19_reg_220 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (icmp_ln68_1_reg_731_pp1_iter6_reg == 1'd0))) begin
        sum_19_reg_220 <= grp_fu_468_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_2_reg_244 <= 32'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter7 == 1'b1) & (icmp_ln68_2_reg_776_pp2_iter6_reg == 1'd0))) begin
        sum_2_reg_244 <= grp_fu_554_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sum_3_reg_268 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter7 == 1'b1) & (icmp_ln68_3_reg_821_pp3_iter6_reg == 1'd0))) begin
        sum_3_reg_268 <= grp_fu_640_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln68_1_reg_725 <= add_ln68_1_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln68_1_reg_725_pp1_iter1_reg <= add_ln68_1_reg_725;
        icmp_ln68_1_reg_731 <= icmp_ln68_1_fu_429_p2;
        icmp_ln68_1_reg_731_pp1_iter1_reg <= icmp_ln68_1_reg_731;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln68_1_reg_725_pp1_iter2_reg <= add_ln68_1_reg_725_pp1_iter1_reg;
        add_ln68_1_reg_725_pp1_iter3_reg <= add_ln68_1_reg_725_pp1_iter2_reg;
        add_ln68_1_reg_725_pp1_iter4_reg <= add_ln68_1_reg_725_pp1_iter3_reg;
        icmp_ln68_1_reg_731_pp1_iter2_reg <= icmp_ln68_1_reg_731_pp1_iter1_reg;
        icmp_ln68_1_reg_731_pp1_iter3_reg <= icmp_ln68_1_reg_731_pp1_iter2_reg;
        icmp_ln68_1_reg_731_pp1_iter4_reg <= icmp_ln68_1_reg_731_pp1_iter3_reg;
        icmp_ln68_1_reg_731_pp1_iter5_reg <= icmp_ln68_1_reg_731_pp1_iter4_reg;
        icmp_ln68_1_reg_731_pp1_iter6_reg <= icmp_ln68_1_reg_731_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln68_2_reg_770 <= add_ln68_2_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln68_2_reg_770_pp2_iter1_reg <= add_ln68_2_reg_770;
        icmp_ln68_2_reg_776 <= icmp_ln68_2_fu_515_p2;
        icmp_ln68_2_reg_776_pp2_iter1_reg <= icmp_ln68_2_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln68_2_reg_770_pp2_iter2_reg <= add_ln68_2_reg_770_pp2_iter1_reg;
        add_ln68_2_reg_770_pp2_iter3_reg <= add_ln68_2_reg_770_pp2_iter2_reg;
        add_ln68_2_reg_770_pp2_iter4_reg <= add_ln68_2_reg_770_pp2_iter3_reg;
        icmp_ln68_2_reg_776_pp2_iter2_reg <= icmp_ln68_2_reg_776_pp2_iter1_reg;
        icmp_ln68_2_reg_776_pp2_iter3_reg <= icmp_ln68_2_reg_776_pp2_iter2_reg;
        icmp_ln68_2_reg_776_pp2_iter4_reg <= icmp_ln68_2_reg_776_pp2_iter3_reg;
        icmp_ln68_2_reg_776_pp2_iter5_reg <= icmp_ln68_2_reg_776_pp2_iter4_reg;
        icmp_ln68_2_reg_776_pp2_iter6_reg <= icmp_ln68_2_reg_776_pp2_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln68_3_reg_815 <= add_ln68_3_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln68_3_reg_815_pp3_iter1_reg <= add_ln68_3_reg_815;
        icmp_ln68_3_reg_821 <= icmp_ln68_3_fu_601_p2;
        icmp_ln68_3_reg_821_pp3_iter1_reg <= icmp_ln68_3_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        add_ln68_3_reg_815_pp3_iter2_reg <= add_ln68_3_reg_815_pp3_iter1_reg;
        add_ln68_3_reg_815_pp3_iter3_reg <= add_ln68_3_reg_815_pp3_iter2_reg;
        add_ln68_3_reg_815_pp3_iter4_reg <= add_ln68_3_reg_815_pp3_iter3_reg;
        icmp_ln68_3_reg_821_pp3_iter2_reg <= icmp_ln68_3_reg_821_pp3_iter1_reg;
        icmp_ln68_3_reg_821_pp3_iter3_reg <= icmp_ln68_3_reg_821_pp3_iter2_reg;
        icmp_ln68_3_reg_821_pp3_iter4_reg <= icmp_ln68_3_reg_821_pp3_iter3_reg;
        icmp_ln68_3_reg_821_pp3_iter5_reg <= icmp_ln68_3_reg_821_pp3_iter4_reg;
        icmp_ln68_3_reg_821_pp3_iter6_reg <= icmp_ln68_3_reg_821_pp3_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln68_reg_680 <= add_ln68_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln68_reg_680_pp0_iter1_reg <= add_ln68_reg_680;
        icmp_ln68_reg_686 <= icmp_ln68_fu_343_p2;
        icmp_ln68_reg_686_pp0_iter1_reg <= icmp_ln68_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln68_reg_680_pp0_iter2_reg <= add_ln68_reg_680_pp0_iter1_reg;
        add_ln68_reg_680_pp0_iter3_reg <= add_ln68_reg_680_pp0_iter2_reg;
        add_ln68_reg_680_pp0_iter4_reg <= add_ln68_reg_680_pp0_iter3_reg;
        icmp_ln68_reg_686_pp0_iter2_reg <= icmp_ln68_reg_686_pp0_iter1_reg;
        icmp_ln68_reg_686_pp0_iter3_reg <= icmp_ln68_reg_686_pp0_iter2_reg;
        icmp_ln68_reg_686_pp0_iter4_reg <= icmp_ln68_reg_686_pp0_iter3_reg;
        icmp_ln68_reg_686_pp0_iter5_reg <= icmp_ln68_reg_686_pp0_iter4_reg;
        icmp_ln68_reg_686_pp0_iter6_reg <= icmp_ln68_reg_686_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        or_ln64_7_cast12_reg_755[0] <= or_ln64_7_cast12_fu_481_p1[0];
or_ln64_7_cast12_reg_755[4 : 2] <= or_ln64_7_cast12_fu_481_p1[4 : 2];
        p_shl4_cast_reg_760[3] <= p_shl4_cast_fu_493_p1[3];
p_shl4_cast_reg_760[7 : 5] <= p_shl4_cast_fu_493_p1[7 : 5];
        zext_ln68_2_reg_765[1] <= zext_ln68_2_fu_505_p1[1];
zext_ln68_2_reg_765[5 : 3] <= zext_ln68_2_fu_505_p1[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        or_ln64_8_cast14_reg_800[4 : 2] <= or_ln64_8_cast14_fu_567_p1[4 : 2];
        p_shl6_cast_reg_805[7 : 5] <= p_shl6_cast_fu_579_p1[7 : 5];
        zext_ln68_3_reg_810[5 : 3] <= zext_ln68_3_fu_591_p1[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        or_ln64_cast10_reg_710[4 : 1] <= or_ln64_cast10_fu_395_p1[4 : 1];
        p_shl2_cast_reg_715[7 : 4] <= p_shl2_cast_fu_407_p1[7 : 4];
        zext_ln68_1_reg_720[5 : 2] <= zext_ln68_1_fu_419_p1[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_shl_cast_reg_670[7 : 3] <= p_shl_cast_fu_323_p1[7 : 3];
        trunc_ln64_reg_663 <= trunc_ln64_fu_311_p1;
        zext_ln64_reg_658[5 : 0] <= zext_ln64_fu_307_p1[5 : 0];
        zext_ln68_reg_675[5 : 1] <= zext_ln68_fu_333_p1[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_reg_686_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln68_3_reg_821_pp3_iter3_reg == 1'd0) & (ap_enable_reg_pp3_iter4 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln68_2_reg_776_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln68_1_reg_731_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        reg_297 <= grp_fu_35017_p_dout0;
    end
end

always @ (*) begin
    if ((icmp_ln68_fu_343_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_1_fu_429_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_2_fu_515_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln68_3_fu_601_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln64_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_686 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_189_p4 = add_ln68_reg_680;
    end else begin
        ap_phi_mux_j_0_phi_fu_189_p4 = j_0_reg_185;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln68_1_reg_731 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_j_1_phi_fu_213_p4 = add_ln68_1_reg_725;
    end else begin
        ap_phi_mux_j_1_phi_fu_213_p4 = j_1_reg_209;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln68_2_reg_776 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_j_2_phi_fu_237_p4 = add_ln68_2_reg_770;
    end else begin
        ap_phi_mux_j_2_phi_fu_237_p4 = j_2_reg_233;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln68_3_reg_821 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_j_3_phi_fu_261_p4 = add_ln68_3_reg_815;
    end else begin
        ap_phi_mux_j_3_phi_fu_261_p4 = j_3_reg_257;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln68_reg_686_pp0_iter4_reg == 1'd0))) begin
        grp_fu_382_in_valid = 1'b1;
    end else begin
        grp_fu_382_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (icmp_ln68_1_reg_731_pp1_iter4_reg == 1'd0))) begin
        grp_fu_468_in_valid = 1'b1;
    end else begin
        grp_fu_468_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln68_2_reg_776_pp2_iter4_reg == 1'd0))) begin
        grp_fu_554_in_valid = 1'b1;
    end else begin
        grp_fu_554_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln68_3_reg_821_pp3_iter4_reg == 1'd0))) begin
        grp_fu_640_in_valid = 1'b1;
    end else begin
        grp_fu_640_in_valid = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        input_r_address0 = j_3_cast15_fu_607_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        input_r_address0 = j_2_cast13_fu_521_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_r_address0 = j_1_cast11_fu_435_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = j_0_cast9_fu_349_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        layer7_weights_address0 = zext_ln70_13_fu_630_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        layer7_weights_address0 = zext_ln70_11_fu_544_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        layer7_weights_address0 = zext_ln70_9_fu_458_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer7_weights_address0 = zext_ln70_7_fu_372_p1;
    end else begin
        layer7_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        layer7_weights_ce0 = 1'b1;
    end else begin
        layer7_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_address0 = or_ln64_8_cast14_reg_800;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = or_ln64_7_cast12_reg_755;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_address0 = or_ln64_cast10_reg_710;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = zext_ln64_reg_658;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_d0 = sum_3_reg_268;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = sum_2_reg_244;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_d0 = sum_19_reg_220;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = sum_0_reg_196;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln64_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln68_fu_343_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln68_fu_343_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln68_1_fu_429_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln68_1_fu_429_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln68_2_fu_515_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln68_2_fu_515_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln68_3_fu_601_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln68_3_fu_601_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_648_p2 = (i_0_reg_173 + 6'd4);

assign add_ln68_1_fu_423_p2 = (ap_phi_mux_j_1_phi_fu_213_p4 + 4'd1);

assign add_ln68_2_fu_509_p2 = (ap_phi_mux_j_2_phi_fu_237_p4 + 4'd1);

assign add_ln68_3_fu_595_p2 = (ap_phi_mux_j_3_phi_fu_261_p4 + 4'd1);

assign add_ln68_fu_337_p2 = (ap_phi_mux_j_0_phi_fu_189_p4 + 4'd1);

assign add_ln70_3_fu_358_p2 = (zext_ln68_reg_675 + j_0_cast_fu_354_p1);

assign add_ln70_4_fu_444_p2 = (zext_ln68_1_reg_720 + j_1_cast_fu_440_p1);

assign add_ln70_5_fu_453_p2 = (zext_ln70_8_fu_449_p1 + p_shl2_cast_reg_715);

assign add_ln70_6_fu_530_p2 = (zext_ln68_2_reg_765 + j_2_cast_fu_526_p1);

assign add_ln70_7_fu_539_p2 = (zext_ln70_10_fu_535_p1 + p_shl4_cast_reg_760);

assign add_ln70_8_fu_616_p2 = (zext_ln68_3_reg_810 + j_3_cast_fu_612_p1);

assign add_ln70_9_fu_625_p2 = (zext_ln70_12_fu_621_p1 + p_shl6_cast_reg_805);

assign add_ln70_fu_367_p2 = (zext_ln70_fu_363_p1 + p_shl_cast_reg_670);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign empty_96_fu_327_p2 = i_0_reg_173 << 6'd1;

assign grp_fu_281_ce = 1'b1;

assign grp_fu_281_p0 = layer7_weights_q0;

assign grp_fu_281_p1 = input_r_q0;

assign grp_fu_281_p2 = grp_fu_35017_p_dout0;

assign grp_fu_35017_p_ce = 1'b1;

assign grp_fu_35017_p_din0 = layer7_weights_q0;

assign grp_fu_35017_p_din1 = input_r_q0;

assign grp_fu_382_p2 = ((add_ln68_reg_680_pp0_iter4_reg == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_468_p2 = ((add_ln68_1_reg_725_pp1_iter4_reg == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_554_p2 = ((add_ln68_2_reg_770_pp2_iter4_reg == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_640_p2 = ((add_ln68_3_reg_815_pp3_iter4_reg == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_301_p2 = ((i_0_reg_173 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln68_1_fu_429_p2 = ((ap_phi_mux_j_1_phi_fu_213_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_515_p2 = ((ap_phi_mux_j_2_phi_fu_237_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln68_3_fu_601_p2 = ((ap_phi_mux_j_3_phi_fu_261_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_343_p2 = ((ap_phi_mux_j_0_phi_fu_189_p4 == 4'd10) ? 1'b1 : 1'b0);

assign j_0_cast9_fu_349_p1 = ap_phi_mux_j_0_phi_fu_189_p4;

assign j_0_cast_fu_354_p1 = ap_phi_mux_j_0_phi_fu_189_p4;

assign j_1_cast11_fu_435_p1 = ap_phi_mux_j_1_phi_fu_213_p4;

assign j_1_cast_fu_440_p1 = ap_phi_mux_j_1_phi_fu_213_p4;

assign j_2_cast13_fu_521_p1 = ap_phi_mux_j_2_phi_fu_237_p4;

assign j_2_cast_fu_526_p1 = ap_phi_mux_j_2_phi_fu_237_p4;

assign j_3_cast15_fu_607_p1 = ap_phi_mux_j_3_phi_fu_261_p4;

assign j_3_cast_fu_612_p1 = ap_phi_mux_j_3_phi_fu_261_p4;

assign or_ln64_5_fu_476_p2 = (trunc_ln64_reg_663 | 5'd2);

assign or_ln64_6_fu_562_p2 = (trunc_ln64_reg_663 | 5'd3);

assign or_ln64_7_cast12_fu_481_p1 = or_ln64_5_fu_476_p2;

assign or_ln64_8_cast14_fu_567_p1 = or_ln64_6_fu_562_p2;

assign or_ln64_cast10_fu_395_p1 = or_ln64_fu_390_p2;

assign or_ln64_fu_390_p2 = (trunc_ln64_reg_663 | 5'd1);

assign p_shl2_cast_fu_407_p1 = p_shl2_fu_399_p3;

assign p_shl2_fu_399_p3 = {{or_ln64_fu_390_p2}, {3'd0}};

assign p_shl3_fu_411_p3 = {{or_ln64_fu_390_p2}, {1'd0}};

assign p_shl4_cast_fu_493_p1 = p_shl4_fu_485_p3;

assign p_shl4_fu_485_p3 = {{or_ln64_5_fu_476_p2}, {3'd0}};

assign p_shl5_fu_497_p3 = {{or_ln64_5_fu_476_p2}, {1'd0}};

assign p_shl6_cast_fu_579_p1 = p_shl6_fu_571_p3;

assign p_shl6_fu_571_p3 = {{or_ln64_6_fu_562_p2}, {3'd0}};

assign p_shl7_fu_583_p3 = {{or_ln64_6_fu_562_p2}, {1'd0}};

assign p_shl_cast_fu_323_p1 = p_shl_fu_315_p3;

assign p_shl_fu_315_p3 = {{trunc_ln64_fu_311_p1}, {3'd0}};

assign trunc_ln64_fu_311_p1 = i_0_reg_173[4:0];

assign zext_ln64_fu_307_p1 = i_0_reg_173;

assign zext_ln68_1_fu_419_p1 = p_shl3_fu_411_p3;

assign zext_ln68_2_fu_505_p1 = p_shl5_fu_497_p3;

assign zext_ln68_3_fu_591_p1 = p_shl7_fu_583_p3;

assign zext_ln68_fu_333_p1 = empty_96_fu_327_p2;

assign zext_ln70_10_fu_535_p1 = add_ln70_6_fu_530_p2;

assign zext_ln70_11_fu_544_p1 = add_ln70_7_fu_539_p2;

assign zext_ln70_12_fu_621_p1 = add_ln70_8_fu_616_p2;

assign zext_ln70_13_fu_630_p1 = add_ln70_9_fu_625_p2;

assign zext_ln70_7_fu_372_p1 = add_ln70_fu_367_p2;

assign zext_ln70_8_fu_449_p1 = add_ln70_4_fu_444_p2;

assign zext_ln70_9_fu_458_p1 = add_ln70_5_fu_453_p2;

assign zext_ln70_fu_363_p1 = add_ln70_3_fu_358_p2;

always @ (posedge ap_clk) begin
    zext_ln64_reg_658[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    p_shl_cast_reg_670[2:0] <= 3'b000;
    p_shl_cast_reg_670[8] <= 1'b0;
    zext_ln68_reg_675[0] <= 1'b0;
    zext_ln68_reg_675[6] <= 1'b0;
    or_ln64_cast10_reg_710[0] <= 1'b1;
    or_ln64_cast10_reg_710[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_shl2_cast_reg_715[3:0] <= 4'b1000;
    p_shl2_cast_reg_715[8] <= 1'b0;
    zext_ln68_1_reg_720[1:0] <= 2'b10;
    zext_ln68_1_reg_720[6] <= 1'b0;
    or_ln64_7_cast12_reg_755[1] <= 1'b1;
    or_ln64_7_cast12_reg_755[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_shl4_cast_reg_760[2:0] <= 3'b000;
    p_shl4_cast_reg_760[4:4] <= 1'b1;
    p_shl4_cast_reg_760[8] <= 1'b0;
    zext_ln68_2_reg_765[0] <= 1'b0;
    zext_ln68_2_reg_765[2:2] <= 1'b1;
    zext_ln68_2_reg_765[6] <= 1'b0;
    or_ln64_8_cast14_reg_800[1:0] <= 2'b11;
    or_ln64_8_cast14_reg_800[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_shl6_cast_reg_805[4:0] <= 5'b11000;
    p_shl6_cast_reg_805[8] <= 1'b0;
    zext_ln68_3_reg_810[2:0] <= 3'b110;
    zext_ln68_3_reg_810[6] <= 1'b0;
end

endmodule //nn_inference_mat_mul
